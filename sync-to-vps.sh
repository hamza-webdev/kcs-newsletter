#!/bin/bash

# Script de synchronisation vers VPS
# Copie les fichiers et dossiers sp√©cifi√©s vers le serveur

# Configuration VPS
VPS_IP="167.86.93.157"
VPS_USER="vpsadmin"
VPS_PATH="/home/vpsadmin/newslettre"
LOCAL_APP_DIR="./app"

echo "üöÄ Synchronisation vers VPS Newsletter KCS"
echo "=========================================="
echo "VPS: $VPS_USER@$VPS_IP"
echo "Destination: $VPS_PATH"
echo "Source locale: $LOCAL_APP_DIR"
echo ""

# V√©rification de la connexion SSH
echo "üîê Test de connexion SSH..."
if ! ssh -o ConnectTimeout=5 -o BatchMode=yes $VPS_USER@$VPS_IP "echo 'Connexion OK'" 2>/dev/null; then
    echo "‚ùå Erreur: Impossible de se connecter au VPS"
    echo "V√©rifiez:"
    echo "  - La connexion internet"
    echo "  - Les identifiants SSH"
    echo "  - Que le serveur est accessible"
    exit 1
fi
echo "‚úÖ Connexion SSH r√©ussie"

# V√©rification des fichiers locaux
echo ""
echo "üìã V√©rification des fichiers locaux..."

# Liste des dossiers √† copier
FOLDERS=("public" "src" "scripts")
# Liste des fichiers √† copier
FILES=(".env.local" "package.json" "postcss.config.mjs" "next.config.ts" "tsconfig.json")

# V√©rification des dossiers
for folder in "${FOLDERS[@]}"; do
    if [ ! -d "$LOCAL_APP_DIR/$folder" ]; then
        echo "‚ö†Ô∏è  Dossier manquant: $LOCAL_APP_DIR/$folder"
    else
        echo "‚úÖ Dossier trouv√©: $folder"
    fi
done

# V√©rification des fichiers
for file in "${FILES[@]}"; do
    if [ ! -f "$LOCAL_APP_DIR/$file" ]; then
        echo "‚ö†Ô∏è  Fichier manquant: $LOCAL_APP_DIR/$file"
    else
        echo "‚úÖ Fichier trouv√©: $file"
    fi
done

# V√©rification des fichiers sp√©ciaux
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ö†Ô∏è  Fichier manquant: docker-compose.yml (racine du projet)"
else
    echo "‚úÖ Fichier trouv√©: docker-compose.yml"
fi

if [ ! -f "init-db.sql" ]; then
    echo "‚ö†Ô∏è  Fichier manquant: init-db.sql (racine du projet)"
else
    echo "‚úÖ Fichier trouv√©: init-db.sql"
fi

echo ""
read -p "ü§î Continuer la synchronisation ? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Synchronisation annul√©e"
    exit 1
fi

# Cr√©ation du r√©pertoire de destination sur le VPS
echo ""
echo "üìÅ Pr√©paration du r√©pertoire de destination..."
ssh $VPS_USER@$VPS_IP << EOF
echo "Cr√©ation du r√©pertoire $VPS_PATH..."
mkdir -p $VPS_PATH
echo "Configuration des permissions..."
chmod 755 $VPS_PATH
echo "‚úÖ R√©pertoire pr√™t"
EOF

# Fonction de synchronisation avec rsync
sync_with_rsync() {
    local source=$1
    local dest=$2
    local description=$3
    
    echo "üì¶ Synchronisation: $description"
    if rsync -avz --progress --delete "$source" "$VPS_USER@$VPS_IP:$dest"; then
        echo "‚úÖ $description synchronis√© avec succ√®s"
    else
        echo "‚ùå Erreur lors de la synchronisation de $description"
        return 1
    fi
}

# Synchronisation des dossiers
echo ""
echo "üìÇ Synchronisation des dossiers..."
for folder in "${FOLDERS[@]}"; do
    if [ -d "$LOCAL_APP_DIR/$folder" ]; then
        sync_with_rsync "$LOCAL_APP_DIR/$folder/" "$VPS_PATH/$folder/" "Dossier $folder"
    fi
done

# Synchronisation des fichiers
echo ""
echo "üìÑ Synchronisation des fichiers..."
for file in "${FILES[@]}"; do
    if [ -f "$LOCAL_APP_DIR/$file" ]; then
        echo "üì¶ Copie: $file"
        if scp "$LOCAL_APP_DIR/$file" "$VPS_USER@$VPS_IP:$VPS_PATH/"; then
            echo "‚úÖ $file copi√© avec succ√®s"
        else
            echo "‚ùå Erreur lors de la copie de $file"
        fi
    fi
done

# Synchronisation des fichiers sp√©ciaux (racine du projet)
echo ""
echo "üìÑ Synchronisation des fichiers de configuration..."

if [ -f "docker-compose.yml" ]; then
    echo "üì¶ Copie: docker-compose.yml"
    if scp "docker-compose.yml" "$VPS_USER@$VPS_IP:$VPS_PATH/"; then
        echo "‚úÖ docker-compose.yml copi√© avec succ√®s"
    else
        echo "‚ùå Erreur lors de la copie de docker-compose.yml"
    fi
fi

if [ -f "init-db.sql" ]; then
    echo "üì¶ Copie: init-db.sql"
    if scp "init-db.sql" "$VPS_USER@$VPS_IP:$VPS_PATH/"; then
        echo "‚úÖ init-db.sql copi√© avec succ√®s"
    else
        echo "‚ùå Erreur lors de la copie de init-db.sql"
    fi
fi

# V√©rification de la synchronisation
echo ""
echo "üîç V√©rification de la synchronisation..."
ssh $VPS_USER@$VPS_IP << EOF
echo "üìã Contenu du r√©pertoire $VPS_PATH:"
ls -la $VPS_PATH/
echo ""
echo "üìä Taille des dossiers:"
du -sh $VPS_PATH/*/ 2>/dev/null || echo "Aucun dossier trouv√©"
echo ""
echo "üìÑ Fichiers de configuration:"
ls -la $VPS_PATH/*.{json,ts,mjs,local,yml,sql} 2>/dev/null || echo "Certains fichiers de config manquent"
EOF

# Configuration des permissions
echo ""
echo "üîß Configuration des permissions..."
ssh $VPS_USER@$VPS_IP << EOF
echo "Configuration des permissions pour $VPS_PATH..."
chmod -R 755 $VPS_PATH
chmod 644 $VPS_PATH/*.json 2>/dev/null || true
chmod 644 $VPS_PATH/*.ts 2>/dev/null || true
chmod 644 $VPS_PATH/*.mjs 2>/dev/null || true
chmod 600 $VPS_PATH/.env.local 2>/dev/null || true
chmod 644 $VPS_PATH/*.yml 2>/dev/null || true
chmod 644 $VPS_PATH/*.sql 2>/dev/null || true

# Permissions sp√©ciales pour les uploads
if [ -d "$VPS_PATH/public/uploads" ]; then
    chmod 755 $VPS_PATH/public/uploads
    echo "‚úÖ Permissions uploads configur√©es"
fi

echo "‚úÖ Permissions configur√©es"
EOF

# R√©sum√© final
echo ""
echo "üéâ Synchronisation termin√©e avec succ√®s!"
echo ""
echo "üìä R√©sum√©:"
echo "   - Dossiers synchronis√©s: ${#FOLDERS[@]}"
echo "   - Fichiers copi√©s: $((${#FILES[@]} + 2))"
echo "   - Destination: $VPS_USER@$VPS_IP:$VPS_PATH"
echo ""
echo "üîó Prochaines √©tapes:"
echo "   1. Se connecter au VPS: ssh $VPS_USER@$VPS_IP"
echo "   2. Aller dans le r√©pertoire: cd $VPS_PATH"
echo "   3. Installer les d√©pendances: npm install"
echo "   4. D√©marrer les services: docker-compose up -d"
echo ""
echo "üí° Commandes utiles:"
echo "   - Voir les fichiers: ssh $VPS_USER@$VPS_IP 'ls -la $VPS_PATH'"
echo "   - Voir les logs: ssh $VPS_USER@$VPS_IP 'cd $VPS_PATH && docker-compose logs -f'"
echo "   - Red√©marrer: ssh $VPS_USER@$VPS_IP 'cd $VPS_PATH && docker-compose restart'"
